import { DeepPartial, Repository } from 'typeorm';
import { PaginationResponseDto } from '../../../../../common/dto';
import { DocumentActionEntity, DocumentAuditEntity, DocumentEntity, DocumentFileEntity, DocumentTypeEntity, FolderEntity } from '../../../../../core/database/entities';
import { TypeOrmBaseService } from '../../../../../core/database/services';
import { DocumentBaseResponse, ESignBaseResponseDto } from '../../../dtos';
import { DocumentOperationType, DocumentStatus } from '../../../enums';
import { ZohoCommonResponse, ZohoService } from '../../../libs/zoho';
import { DocumentAuditService } from '../../../modules/document-audit';
import { CreateDocumentPayloadDto, DeleteMultipleDocumentsPayloadDto, DownloadDocumentsPayloadDto, DownloadDocumentsResponseDto, ExtendDocumentPayloadDto, GetAllDocumentsPayloadDto, GetDocumentByIdPayloadDto, RecallDocumentPayload, RemindDocumentPayloadDto, SubmitDocumentToZohoPayload, UpdateDocumentSettingPayloadDto, UpdateNewDocumentFilePayloadDto } from '../../../modules/document/dtos';
import { DocumentActionService } from '../../document-action/document-action.service';
import { DocumentFileService } from '../../document-file/services/document-file.service';
import { BaseQueryBuilderGetDocumentOpt } from '../types/base-query-builder-get-document-opts.type';
export declare class DocumentService extends TypeOrmBaseService<DocumentEntity> {
    private documentRepository;
    private readonly documentActionService;
    private readonly documentFileService;
    private readonly zohoService;
    private readonly documentAuditService;
    readonly currentDocumentFileBucket: string;
    readonly currentDocumentFilePrefixKey: string;
    constructor(documentRepository: Repository<DocumentEntity>, documentActionService: DocumentActionService, documentFileService: DocumentFileService, zohoService: ZohoService, documentAuditService: DocumentAuditService);
    createDocument(createDocumentPayloadDto: CreateDocumentPayloadDto): Promise<ESignBaseResponseDto<DocumentEntity>>;
    baseQueryBuilderGetDocument(companyId?: number, opts?: Partial<BaseQueryBuilderGetDocumentOpt>): {
        queryBuilder: import("typeorm").SelectQueryBuilder<DocumentEntity>;
        documentAlias: string;
        folderAlias: string;
        documentTypeAlias: string;
        documentActionAlias: string;
        documentFileAlias: string;
    };
    getAllDocuments(paginationQueryDto: GetAllDocumentsPayloadDto): Promise<PaginationResponseDto<DocumentEntity>>;
    getDocumentById(getDocumentByIdPayloadDto: GetDocumentByIdPayloadDto, opts?: Partial<BaseQueryBuilderGetDocumentOpt & {
        calculateSignPercentage: boolean;
    }>): Promise<DocumentEntity>;
    updateNewDocumentFile(updateNewDocumentFilePayloadDto: UpdateNewDocumentFilePayloadDto): Promise<ESignBaseResponseDto<DocumentEntity & DocumentBaseResponse>>;
    updateDocumentSetting(payload: UpdateDocumentSettingPayloadDto): Promise<ESignBaseResponseDto<DocumentEntity & DocumentBaseResponse>>;
    updateDocumentStatusFromZohoWebhook(operationType: DocumentOperationType, status: DocumentStatus, document: DocumentEntity, performedByEmail: string, currentDate: Date, reason?: string): Promise<string | ({
        companyId?: number | undefined;
        name?: string | undefined;
        status?: DeepPartial<DocumentStatus> | undefined;
        recordNo?: number | undefined;
        isSequential?: DeepPartial<boolean> | undefined;
        expirationDays?: number | undefined;
        validity?: number | undefined;
        description?: string | undefined;
        emailReminders?: DeepPartial<boolean> | undefined;
        reminderPeriod?: number | undefined;
        notes?: string | undefined;
        signSubmittedTime?: DeepPartial<Date> | undefined;
        requestId?: string | undefined;
        completedOn?: DeepPartial<Date> | undefined;
        declinedOn?: DeepPartial<Date> | undefined;
        declinedReason?: string | undefined;
        recalledOn?: DeepPartial<Date> | undefined;
        recalledReason?: string | undefined;
        expiredOn?: DeepPartial<Date> | undefined;
        extendedDate?: DeepPartial<Date> | undefined;
        owner?: string | undefined;
        isBulk?: DeepPartial<boolean> | undefined;
        bulkActions?: DeepPartial<string | import("../dtos/bulk-action.dto").BulkActionDto[] | null> | undefined;
        folderId?: number | undefined;
        documentTypeId?: number | undefined;
        documentTemplateId?: number | undefined;
        folder?: DeepPartial<FolderEntity> | undefined;
        documentType?: DeepPartial<DocumentTypeEntity> | undefined;
        documentTemplate?: DeepPartial<import("../../../../../core/database/entities").DocumentTemplateEntity> | undefined;
        documentActions?: DeepPartial<DocumentActionEntity[]> | undefined;
        documentFiles?: DeepPartial<DocumentFileEntity[]> | undefined;
        documentShares?: DeepPartial<import("../../../../../core/database/entities").DocumentShareEntity[]> | undefined;
        documentAudits?: DeepPartial<DocumentAuditEntity[]> | undefined;
        id?: number | undefined;
        isDeleted?: DeepPartial<boolean> | undefined;
        createdBy?: string | undefined;
        createdOn?: DeepPartial<Date> | undefined;
        updatedBy?: string | undefined;
        updatedOn?: DeepPartial<Date | undefined>;
    } & DocumentEntity)>;
    submitDocumentToZoho({ documentId, companyId, userEmail }: SubmitDocumentToZohoPayload, documentEntity?: DocumentEntity): Promise<ESignBaseResponseDto<DocumentEntity & DocumentBaseResponse>>;
    deleteMultipleDocuments(deleteMultipleDocumentsPayloadDto: DeleteMultipleDocumentsPayloadDto): Promise<{
        message: string;
    }>;
    downloadDocuments(payload: DownloadDocumentsPayloadDto, existingEntity?: DocumentEntity): Promise<ESignBaseResponseDto<DownloadDocumentsResponseDto & DocumentBaseResponse>>;
    recallDocument(payload: RecallDocumentPayload): Promise<ESignBaseResponseDto<ZohoCommonResponse & DocumentBaseResponse>>;
    remindRecipients(payload: RemindDocumentPayloadDto): Promise<ESignBaseResponseDto<ZohoCommonResponse & DocumentBaseResponse>>;
    extendDocument(payload: ExtendDocumentPayloadDto): Promise<ESignBaseResponseDto<ZohoCommonResponse & DocumentBaseResponse>>;
    getDocumentAsNew(payload: GetDocumentByIdPayloadDto): Promise<Partial<DocumentEntity>>;
    createFromTemplate(documentEntity: DocumentEntity, userEmail: string): Promise<DocumentEntity>;
}
