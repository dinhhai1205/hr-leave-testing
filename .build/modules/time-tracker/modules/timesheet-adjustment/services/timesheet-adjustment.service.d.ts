import { Repository } from 'typeorm';
import { AdjustmentStatus, CyclePeriodDetailEntity, CyclePeriodHeaderEntity, TimeAdjustmentType, TimeSheetAdjustmentEntity, TimeSheetAdjustmentType, TypeOrmBaseService } from '../../../../../core/database';
import { PayrollTimeSheetEntity } from '../../../../../core/database/entities/payroll-timesheet.entity';
import { PrtrxHdrService } from '../../../../payroll/modules/prtrx-hdr/prtrx-hdr.service';
import { LeaveService } from '../../../../time-off/modules/leave/services';
import { EmployeeService } from '../../../../user/modules/employee/employee.service';
import { TimeTrackerApiService } from '../../../libs/api/api.service';
import { EmployeeMappingService } from '../../employee-mapping/employee-mapping.service';
import { PayElementMappingService } from '../../pay-element-mapping/pay-element-mapping.service';
import { WorkScheduleService } from '../../work-schedule';
import { CreateAdjustmentFromTTDto, CreateMultiTimeSheetAdjustmentDto, CreateTimeSheetAdjustmentDto, QueryWithPaginationDto, TimeSheetAdjustmentDto, UpdateTimeSheetAdjustmentDto } from '../dtos';
import { PayRollGroupService } from '../../../../payroll/modules/payroll-group/payroll-group.service';
import { WorkScheduleAssignmentService } from '../../work-schedule-assignment/work-schedule-assignment.service';
export declare class TimeSheetAdjustmentService extends TypeOrmBaseService<TimeSheetAdjustmentEntity> {
    private readonly timeSheetAdjustmentRepository;
    private readonly payrollTimesheetRepository;
    private readonly cyclePeriodHeaderRepository;
    private readonly cyclePeriodDetailRepository;
    private readonly workScheduleService;
    private readonly employeeMappingService;
    private readonly apiService;
    private readonly leaveService;
    private readonly employeeService;
    private readonly prtrxHdrService;
    private readonly payElementMappingService;
    private readonly payrollGroupService;
    private readonly workScheduleAssignmentService;
    constructor(timeSheetAdjustmentRepository: Repository<TimeSheetAdjustmentEntity>, payrollTimesheetRepository: Repository<PayrollTimeSheetEntity>, cyclePeriodHeaderRepository: Repository<CyclePeriodHeaderEntity>, cyclePeriodDetailRepository: Repository<CyclePeriodDetailEntity>, workScheduleService: WorkScheduleService, employeeMappingService: EmployeeMappingService, apiService: TimeTrackerApiService, leaveService: LeaveService, employeeService: EmployeeService, prtrxHdrService: PrtrxHdrService, payElementMappingService: PayElementMappingService, payrollGroupService: PayRollGroupService, workScheduleAssignmentService: WorkScheduleAssignmentService);
    createAdjustment(createAdjustmentDto: CreateTimeSheetAdjustmentDto, companyId: number, userEmail: string): Promise<TimeSheetAdjustmentEntity[]>;
    createAdjustmentWithDtos(createAdjustmentDtos: CreateTimeSheetAdjustmentDto[], companyId: number, userEmail: string): Promise<TimeSheetAdjustmentEntity[]>;
    getMultipleTimesheetAdjustments: (ids: number[]) => Promise<TimeSheetAdjustmentEntity[]>;
    createMultiAdjustments(createAdjustmentDto: CreateMultiTimeSheetAdjustmentDto, companyId: number, userEmail: string): Promise<TimeSheetAdjustmentEntity[]>;
    createMultiAdjustmentsFromTimeTracker(createAdjustmentDto: CreateAdjustmentFromTTDto, prtrxHdrId: number, companyId: number, userEmail: string): Promise<TimeSheetAdjustmentEntity[]>;
    archiveAdjustment(id: number, userEmail: string): Promise<TimeSheetAdjustmentDto>;
    archiveMultiAdjustment(ids: number[], userEmail: string): Promise<import("typeorm").UpdateResult>;
    restoreAdjustment(id: number, userEmail: string): Promise<TimeSheetAdjustmentDto>;
    updateAdjustment(id: number, updatePayload: UpdateTimeSheetAdjustmentDto, userEmail: string): Promise<TimeSheetAdjustmentDto>;
    getAllAdjustments(companyId: number, paginationQueryDto: QueryWithPaginationDto): Promise<{
        data: {
            employeeRef: string | null;
            fullNameLocal: string | null;
            fullNameEn: string | null;
            orgElements: string | null;
            payrollGroup: string | null;
            costCenter: string | null;
            payroll: undefined;
            payCalcMet: import("../../../../payroll/modules/payroll-group/enums/payroll-group-type.enum").EPayrollGroupType;
            timeSheetType: TimeSheetAdjustmentType;
            status: AdjustmentStatus;
            payElementMappingId: number;
            date: string;
            hour: number;
            daysToProrate: number;
            payrollTimesheetId: number;
            companyId: number;
            workScheduleSetting: string;
            adjustmentType: TimeAdjustmentType;
            leaveId: number;
            uuid: string;
            day: number;
            payElementMapping: import("../../../../../core/database/entities/pay-element-mapping.entity").PayElementMappingEntity;
            id: number;
            isDeleted: boolean;
            createdBy: string;
            createdOn: Date;
            updatedBy?: string;
            updatedOn?: Date;
        }[];
        page: number;
        take: number;
        itemCount: number;
        pageCount: number;
        hasPreviousPage: boolean;
        hasNextPage: boolean;
    }>;
    getAdjustmentById(id: number, companyId: number): Promise<TimeSheetAdjustmentDto>;
    getAdjustmentsByPayrollId(payrollId: number, companyId: number, adjustmentType?: TimeAdjustmentType): Promise<TimeSheetAdjustmentDto[]>;
    getAdjustmentsByPayrollHeaderIdWithoutPagination(prtrxHdrId: number, companyId: number, adjustmentType?: TimeAdjustmentType): Promise<TimeSheetAdjustmentDto[]>;
    getAdjustmentsByPayrollIds(payrollIds: number[], companyId: number, adjustmentType?: TimeAdjustmentType): Promise<TimeSheetAdjustmentDto[]>;
    getAdjustmentsByPayrollHeaderId(prtrxHdrId: number, companyId: number, paginationQueryDto: QueryWithPaginationDto, userEmail: string, timeTrackerCompanyId?: string, adjustmentType?: TimeAdjustmentType): Promise<{
        data: {
            employeeRef: string | null;
            fullNameLocal: string | null;
            fullNameEn: string | null;
            orgElements: string | null;
            payrollGroup: string | null;
            costCenter: string | null;
            payroll: undefined;
            payCalcMet: import("../../../../payroll/modules/payroll-group/enums/payroll-group-type.enum").EPayrollGroupType;
            timeSheetType: TimeSheetAdjustmentType;
            status: AdjustmentStatus;
            payElementMappingId: number;
            date: string;
            hour: number;
            daysToProrate: number;
            payrollTimesheetId: number;
            companyId: number;
            workScheduleSetting: string;
            adjustmentType: TimeAdjustmentType;
            leaveId: number;
            uuid: string;
            day: number;
            payElementMapping: import("../../../../../core/database/entities/pay-element-mapping.entity").PayElementMappingEntity;
            id: number;
            isDeleted: boolean;
            createdBy: string;
            createdOn: Date;
            updatedBy?: string;
            updatedOn?: Date;
        }[];
        page: number;
        take: number;
        itemCount: number;
        pageCount: number;
        hasPreviousPage: boolean;
        hasNextPage: boolean;
    }>;
    getTimesheetAdjustmentByIds(ids: number[]): Promise<TimeSheetAdjustmentEntity[]>;
    getTimesheetAdjustmentByPayrollHeaderId(prtrxHdrId: number, companyId: number, paginationQueryDto: QueryWithPaginationDto, adjustmentType?: TimeAdjustmentType): Promise<{
        employeeRef: string | null;
        fullNameLocal: string | null;
        fullNameEn: string | null;
        orgElements: string | null;
        payrollGroup: string | null;
        costCenter: string | null;
        payroll: undefined;
        payCalcMet: import("../../../../payroll/modules/payroll-group/enums/payroll-group-type.enum").EPayrollGroupType;
        timeSheetType: TimeSheetAdjustmentType;
        status: AdjustmentStatus;
        payElementMappingId: number;
        date: string;
        hour: number;
        daysToProrate: number;
        payrollTimesheetId: number;
        companyId: number;
        workScheduleSetting: string;
        adjustmentType: TimeAdjustmentType;
        leaveId: number;
        uuid: string;
        day: number;
        payElementMapping: import("../../../../../core/database/entities/pay-element-mapping.entity").PayElementMappingEntity;
        id: number;
        isDeleted: boolean;
        createdBy: string;
        createdOn: Date;
        updatedBy?: string;
        updatedOn?: Date;
    }[]>;
    handleCalculateUnpaidDaysTimeTracker(listEmployeeIds: number[], startDate: string, endDate: string, companyId: number, ttCompanyId: string): Promise<{
        UnpaidInfo: Record<string, {
            day: string;
            unPaidDay: number;
            leaveId?: number;
        }[]>;
        LeaveInfo: {
            [employeeId: number]: {
                id: number;
                dateFrom: string;
                dateTo: string;
                effDayOfLeave: number;
                daysOff: string[];
                workingHalfDay: string[];
                workingFullDay: string[];
            }[];
        };
        trackedInfo: any;
    }>;
    handleRecompute(companyId: number, ttCompanyId: string, userEmail: string, payrollHeaderId: number): Promise<never[] | {
        result: TimeSheetAdjustmentEntity[];
    }>;
    handleCalculateUnpaidDaysFromLeave(listEmployeeIds: number[], startDate: string, endDate: string, companyId: number): Promise<{
        UnpaidInfo: Record<string, {
            day: string;
            unPaidDay: number;
            leaveId?: number;
        }[]>;
        LeaveInfo: {
            [employeeId: number]: {
                id: number;
                dateFrom: string;
                dateTo: string;
                effDayOfLeave: number;
                daysOff: string[];
                workingHalfDay: string[];
                workingFullDay: string[];
            }[];
        };
    }>;
    handleRecomputeFromLeave(companyId: number, userEmail: string, payrollHeaderId: number): Promise<TimeSheetAdjustmentDto[]>;
    private getCycleDateRange;
    private getDayToProrate;
    private getDayToProrateV2;
}
