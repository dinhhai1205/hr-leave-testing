import { TimeTrackerMapping } from '../../common';
import { StreamableFile } from '@nestjs/common';
import { BaseParamDto } from '../../../../common/dto';
import { TimeSheetAdjustmentEntity } from '../../../../core/database';
import { IMulterFileUploaded } from '../../common/interfaces';
import { ImportExportTimeSheetAdjustmentExcelFileService, TimeSheetAdjustmentService } from './services';
import { CreateMultiTimeSheetAdjustmentDto, CreateTimeSheetAdjustmentDto, QueryWithPaginationDto, TimeSheetAdjustmentDto, UpdateTimeSheetAdjustmentDto } from './dtos';
export declare class TimeSheetAdjustmentController {
    private readonly timeSheetAdjustmentService;
    private readonly importExportTimeSheet;
    constructor(timeSheetAdjustmentService: TimeSheetAdjustmentService, importExportTimeSheet: ImportExportTimeSheetAdjustmentExcelFileService);
    recomputeFromLeave({ companyId }: BaseParamDto, payrollHeaderId: number, userEmail: string): Promise<TimeSheetAdjustmentDto[]>;
    importFile(file: IMulterFileUploaded, companyId: number, payrollHeaderId: number, userEmail: string): Promise<TimeSheetAdjustmentDto[]>;
    exportFile(companyId: number, payrollHeaderId: number, query: QueryWithPaginationDto): Promise<StreamableFile>;
    getAdjustmentsByHeaderId(headerId: number, { companyId }: BaseParamDto, timeTrackerEmployeeInfo: TimeTrackerMapping, userEmail: string, query: QueryWithPaginationDto): Promise<{
        data: {
            employeeRef: string | null;
            fullNameLocal: string | null;
            fullNameEn: string | null;
            orgElements: string | null;
            payrollGroup: string | null;
            costCenter: string | null;
            payroll: undefined;
            payCalcMet: import("../../../payroll/modules/payroll-group/enums/payroll-group-type.enum").EPayrollGroupType;
            timeSheetType: import("../../../../core/database").TimeSheetAdjustmentType;
            status: import("../../../../core/database").AdjustmentStatus;
            payElementMappingId: number;
            date: string;
            hour: number;
            daysToProrate: number;
            payrollTimesheetId: number;
            companyId: number;
            workScheduleSetting: string;
            adjustmentType: import("../../../../core/database").TimeAdjustmentType;
            leaveId: number;
            uuid: string;
            day: number;
            payElementMapping: import("../../../../core/database/entities/pay-element-mapping.entity").PayElementMappingEntity;
            id: number;
            isDeleted: boolean;
            createdBy: string;
            createdOn: Date;
            updatedBy?: string;
            updatedOn?: Date;
        }[];
        page: number;
        take: number;
        itemCount: number;
        pageCount: number;
        hasPreviousPage: boolean;
        hasNextPage: boolean;
    }>;
    generateExampleFile(companyId: number, payrollHeaderId: number, query: QueryWithPaginationDto): Promise<StreamableFile>;
    getAdjustmentById(adjustmentId: number, companyId: number): Promise<TimeSheetAdjustmentDto>;
    getAllAdjustments(companyId: number, query: QueryWithPaginationDto): Promise<{
        data: {
            employeeRef: string | null;
            fullNameLocal: string | null;
            fullNameEn: string | null;
            orgElements: string | null;
            payrollGroup: string | null;
            costCenter: string | null;
            payroll: undefined;
            payCalcMet: import("../../../payroll/modules/payroll-group/enums/payroll-group-type.enum").EPayrollGroupType;
            timeSheetType: import("../../../../core/database").TimeSheetAdjustmentType;
            status: import("../../../../core/database").AdjustmentStatus;
            payElementMappingId: number;
            date: string;
            hour: number;
            daysToProrate: number;
            payrollTimesheetId: number;
            companyId: number;
            workScheduleSetting: string;
            adjustmentType: import("../../../../core/database").TimeAdjustmentType;
            leaveId: number;
            uuid: string;
            day: number;
            payElementMapping: import("../../../../core/database/entities/pay-element-mapping.entity").PayElementMappingEntity;
            id: number;
            isDeleted: boolean;
            createdBy: string;
            createdOn: Date;
            updatedBy?: string;
            updatedOn?: Date;
        }[];
        page: number;
        take: number;
        itemCount: number;
        pageCount: number;
        hasPreviousPage: boolean;
        hasNextPage: boolean;
    }>;
    createMultiAdjustment(companyId: number, userEmail: string, createAdjustmentDtos: CreateMultiTimeSheetAdjustmentDto): Promise<TimeSheetAdjustmentEntity[]>;
    createAdjustment(companyId: number, userEmail: string, createAdjustmentDto: CreateTimeSheetAdjustmentDto): Promise<TimeSheetAdjustmentEntity[]>;
    restoreAdjustment(adjustmentId: number, userEmail: string): Promise<TimeSheetAdjustmentDto>;
    updateAdjustment(adjustmentId: number, userEmail: string, updateAdjustmentDto: UpdateTimeSheetAdjustmentDto): Promise<TimeSheetAdjustmentDto>;
    deleteAdjustments(adjustmentIds: number[], userEmail: string): Promise<import("typeorm").UpdateResult>;
    deleteAdjustment(adjustmentId: number, userEmail: string): Promise<TimeSheetAdjustmentDto>;
}
