import { BaseParamDto, PaginationResponseDto } from '../../../../common/dto';
import { IActiveUserData } from '../../../../core/iam';
import { IMulterFileUploaded } from '../../common/interfaces';
import { AssignWorkScheduleEmployeesDto, ChangeRoleEmployeesResponseDto, CreateManyEmployeesDto, DeleteMultiEmployeeResponseDto, DeleteMultipleEmployeeBodyDto, EmployeeResponseDto, EmployeeRoleBodyDto, PaginationEmployeeQueryDto, UnassignWorkScheduleEmployeesDto, UpdateEmployeeProfileDto } from './dtos';
import { TimeTrackerApiService } from '../../../time-tracker/libs/api/api.service';
import { EmployeeService } from '../../../user/modules/employee/employee.service';
import { TimeTrackerMapping } from '../../common/decorators/type';
import { EmployeeMappingService } from '../employee-mapping/employee-mapping.service';
import { ProjectService } from '../project/project.service';
import { WorkScheduleService } from '../work-schedule';
import { TimeTrackerEmployeeService } from './employee.service';
export declare class TimeTrackerEmployeeController {
    private readonly apiService;
    private employeeService;
    private readonly hrForteEmployeeService;
    private readonly workScheduleService;
    private readonly projectService;
    private readonly employeeMappingService;
    constructor(apiService: TimeTrackerApiService, employeeService: TimeTrackerEmployeeService, hrForteEmployeeService: EmployeeService, workScheduleService: WorkScheduleService, projectService: ProjectService, employeeMappingService: EmployeeMappingService);
    getAll({ companyId }: BaseParamDto, paginationQueryDto: PaginationEmployeeQueryDto, { timeTrackerCompanyId }: TimeTrackerMapping): Promise<PaginationResponseDto<import("../../../../core/database").EmployeeEntity>>;
    assignWorkScheduleEmployee({ companyId }: BaseParamDto, assignWorkScheduleEmployeesDto: AssignWorkScheduleEmployeesDto, workScheduleId: number, { timeTrackerCompanyId }: TimeTrackerMapping, { userEmail }: IActiveUserData): Promise<{
        message: string;
        employeeIds: number[];
    }>;
    unAssignWorkScheduleEmployee({ companyId }: BaseParamDto, assignWorkScheduleEmployeesDto: UnassignWorkScheduleEmployeesDto, { timeTrackerCompanyId }: TimeTrackerMapping, { userEmail }: IActiveUserData): Promise<{
        message: string;
        employeeIds: number[];
    }>;
    syncAllEmployees({ companyId }: BaseParamDto, { timeTrackerCompanyId }: TimeTrackerMapping): Promise<EmployeeResponseDto[]>;
    createEmployee({ companyId }: BaseParamDto, createManyEmployeesDto: CreateManyEmployeesDto, { timeTrackerCompanyId }: TimeTrackerMapping): Promise<EmployeeResponseDto[]>;
    assignEmployeesToARole({ companyId }: BaseParamDto, { timeTrackerCompanyId }: TimeTrackerMapping, employeeRoleDto: EmployeeRoleBodyDto): Promise<ChangeRoleEmployeesResponseDto>;
    updateEmployeeAvatar({ companyId }: BaseParamDto, file: IMulterFileUploaded, { timeTrackerCompanyId, timeTrackerEmployeeId }: TimeTrackerMapping): Promise<EmployeeResponseDto>;
    getEmployeeInfoForClockWithEmployeeId({ companyId }: BaseParamDto, employeeId: number, { timeTrackerCompanyId }: TimeTrackerMapping): Promise<{
        id: number;
        members: {
            groupId: number;
            employeeId: number;
            group: {
                id: number;
                workScheduleId: string;
                name: string;
                description: string;
                active: boolean;
                members: import("../member/dtos").MemberResponseDto[];
                isDeleted: boolean;
                companyId?: string;
                createdBy: string;
                createdOn: Date;
                updatedBy?: string;
                updatedOn?: Date;
            };
            role: import("../../common").RoleGroup;
            employee: EmployeeResponseDto;
            id: string;
            isDeleted: boolean;
            companyId?: string;
            createdBy: string;
            createdOn: Date;
            updatedBy?: string;
            updatedOn?: Date;
        }[];
        workSchedule: {
            id: number | undefined;
            name: string;
            workArrangement: import("../../common").WorkArrangement;
            breakType: import("../../common").BreakType;
            default: boolean;
            weeklyHours: number;
            unitTime: import("../../common").UnitTime;
            excludeEarlyClockIn: boolean;
            employees: EmployeeResponseDto[];
            groups: import("../group/dtos").GroupResponseDto[];
            isDeleted: boolean;
            companyId?: string;
            createdBy: string;
            createdOn: Date;
            updatedBy?: string;
            updatedOn?: Date;
        } | null;
        workScheduleId: number | null;
        project: import("../project/dtos").ProjectResponseDto | undefined;
        userId: string;
        roleId: string;
        roleName: string;
        email: string;
        firstName: string;
        lastName: string;
        avatar: string;
        phone: string;
        address: string;
        age: number;
        gender: string;
        country: string;
        timezone: string;
        active: boolean;
        activities?: import("../activity/dtos").ActivityResponseDto[];
        assigneeGroups?: {
            project: import("../project/dtos").ProjectResponseDto;
        };
        projects?: import("../project/dtos").ProjectResponseDto[];
        isDeleted: boolean;
        companyId?: string;
        createdBy: string;
        createdOn: Date;
        updatedBy?: string;
        updatedOn?: Date;
    }>;
    getAllEmployeesInCompanyWithFilter({ companyId }: BaseParamDto, paginationQueryDto: PaginationEmployeeQueryDto, { timeTrackerCompanyId }: TimeTrackerMapping): Promise<PaginationResponseDto<any>>;
    getEmployeeInfoForClock({ companyId }: BaseParamDto, { timeTrackerCompanyId }: TimeTrackerMapping): Promise<{
        id: number;
        members: {
            groupId: number;
            employeeId: number;
            group: {
                id: number;
                workScheduleId: string;
                name: string;
                description: string;
                active: boolean;
                members: import("../member/dtos").MemberResponseDto[];
                isDeleted: boolean;
                companyId?: string;
                createdBy: string;
                createdOn: Date;
                updatedBy?: string;
                updatedOn?: Date;
            };
            role: import("../../common").RoleGroup;
            employee: EmployeeResponseDto;
            id: string;
            isDeleted: boolean;
            companyId?: string;
            createdBy: string;
            createdOn: Date;
            updatedBy?: string;
            updatedOn?: Date;
        }[];
        workSchedule: {
            id: number | undefined;
            name: string;
            workArrangement: import("../../common").WorkArrangement;
            breakType: import("../../common").BreakType;
            default: boolean;
            weeklyHours: number;
            unitTime: import("../../common").UnitTime;
            excludeEarlyClockIn: boolean;
            employees: EmployeeResponseDto[];
            groups: import("../group/dtos").GroupResponseDto[];
            isDeleted: boolean;
            companyId?: string;
            createdBy: string;
            createdOn: Date;
            updatedBy?: string;
            updatedOn?: Date;
        } | null;
        workScheduleId: number | null;
        project: import("../project/dtos").ProjectResponseDto | undefined;
        userId: string;
        roleId: string;
        roleName: string;
        email: string;
        firstName: string;
        lastName: string;
        avatar: string;
        phone: string;
        address: string;
        age: number;
        gender: string;
        country: string;
        timezone: string;
        active: boolean;
        activities?: import("../activity/dtos").ActivityResponseDto[];
        assigneeGroups?: {
            project: import("../project/dtos").ProjectResponseDto;
        };
        projects?: import("../project/dtos").ProjectResponseDto[];
        isDeleted: boolean;
        companyId?: string;
        createdBy: string;
        createdOn: Date;
        updatedBy?: string;
        updatedOn?: Date;
    }>;
    getUserById({ companyId }: BaseParamDto, employeeId: number, { timeTrackerCompanyId }: TimeTrackerMapping): Promise<{
        id: number;
        companyId: number;
        members: {
            groupId: number;
            employeeId: number;
            group: {
                id: number;
                workScheduleId: string;
                name: string;
                description: string;
                active: boolean;
                members: import("../member/dtos").MemberResponseDto[];
                isDeleted: boolean;
                companyId?: string;
                createdBy: string;
                createdOn: Date;
                updatedBy?: string;
                updatedOn?: Date;
            };
            role: import("../../common").RoleGroup;
            employee: EmployeeResponseDto;
            id: string;
            isDeleted: boolean;
            companyId?: string;
            createdBy: string;
            createdOn: Date;
            updatedBy?: string;
            updatedOn?: Date;
        }[];
        roleInGroups: import("../../common").RoleGroup;
        workScheduleId: string;
        userId: string;
        roleId: string;
        roleName: string;
        email: string;
        firstName: string;
        lastName: string;
        avatar: string;
        phone: string;
        address: string;
        age: number;
        gender: string;
        country: string;
        timezone: string;
        active: boolean;
        workSchedule: import("../work-schedule/dtos").WorkScheduleResponseDto;
        isDeleted: boolean;
        createdBy: string;
        createdOn: Date;
        updatedBy?: string;
        updatedOn?: Date;
    }>;
    getAllWorkScheduleOfEmployeeByEmployeeId({ companyId }: BaseParamDto, employeeId: number, { timeTrackerCompanyId }: TimeTrackerMapping): Promise<({
        workScheduleId: number;
        workScheduleName: string;
        state: import("../work-schedule/enums/work-schedule-state.enum").EWorkScheduleState;
        groupId: number | undefined;
        groupName: string | undefined;
        startDate: Date;
        endDate: Date;
        default: boolean;
    } | null)[]>;
    isEmployeeInTimeTracker({ companyId }: BaseParamDto, { timeTrackerEmployeeId }: TimeTrackerMapping, activeUser: IActiveUserData): Promise<{
        isTimeTrackerEmployee: boolean;
        isAdmin: boolean;
    }>;
    updateEmployeeProfile({ companyId }: BaseParamDto, employeeId: number, { timeTrackerCompanyId }: TimeTrackerMapping, updateEmployeeProfileDto: UpdateEmployeeProfileDto): Promise<EmployeeResponseDto>;
    updateOwnEmployeeProfile({ companyId }: BaseParamDto, { timeTrackerCompanyId, timeTrackerEmployeeId }: TimeTrackerMapping, updateEmployeeProfileDto: UpdateEmployeeProfileDto): Promise<EmployeeResponseDto>;
    deleteEmployees({ companyId }: BaseParamDto, deleteMultipleEmployeeDto: DeleteMultipleEmployeeBodyDto, { timeTrackerCompanyId }: TimeTrackerMapping): Promise<DeleteMultiEmployeeResponseDto>;
}
