import { LeaveService } from '../../../../time-off/modules/leave/services';
import { ITimeEntryOverviewData, ITimeEntryOverviewResponse } from '../../../common/interfaces';
import { TimeTrackerApiService } from '../../../libs/api/api.service';
import { EmployeeMappingService } from '../../employee-mapping/employee-mapping.service';
import { TimeSheetAdjustmentService } from '../../timesheet-adjustment/services';
import { WorkScheduleService } from '../../work-schedule';
import { CreateTimeEntryBodyDto, DeleteTimeEntryDto, GetDetailTimeEntryQueryDto, GetTimeEntriesOverviewQueryDto, GetTimeEntriesOverviewQueryESSDto, TimeEntryResponseDTO, UpdateMultiTimeEntryDto } from '../dtos';
import * as moment from 'moment';
import { PrtrxHdrService } from '../../../../payroll/modules/prtrx-hdr/prtrx-hdr.service';
import { TimeEntryEntity } from '../time-entry.entity';
import { GroupMappingService } from '../../group-mapping/group-mapping.service';
import { TimeTrackerEmployeeService } from '../../employee/employee.service';
export declare class TimeEntryService {
    private readonly apiService;
    private readonly employeeMappingService;
    private readonly workScheduleService;
    private readonly leaveService;
    private readonly timeSheetAdjustmentService;
    private readonly prtrxHdrService;
    private readonly groupMappingService;
    private readonly timeTrackerEmployeeService;
    constructor(apiService: TimeTrackerApiService, employeeMappingService: EmployeeMappingService, workScheduleService: WorkScheduleService, leaveService: LeaveService, timeSheetAdjustmentService: TimeSheetAdjustmentService, prtrxHdrService: PrtrxHdrService, groupMappingService: GroupMappingService, timeTrackerEmployeeService: TimeTrackerEmployeeService);
    createTimeEntry(createTimeEntryBodyDto: CreateTimeEntryBodyDto, ttCompanyId: string, companyId: number): Promise<TimeEntryResponseDTO | TimeEntryResponseDTO[]>;
    handleSummaryWeekLyTrackedHour(companyId: number, ttCompanyId: string, employeeId: number, startDate: string, endDate: string): Promise<any>;
    handleGetTimeEntriesSummarizeInDate(companyId: number, ttCompanyId: string, employeeId: number, query: GetDetailTimeEntryQueryDto): Promise<{
        workScheduleEntity: {
            id: number | undefined;
            ttWorkScheduleId?: string | undefined;
            name?: string | undefined;
            utcOffset?: number | undefined;
            workArrangement?: import("../../../common").WorkArrangement | undefined;
            breakType?: import("../../../common").BreakType | undefined;
            default?: boolean | undefined;
            weeklyHours?: number | undefined;
            unitTime?: import("../../../common").UnitTime | undefined;
            excludeEarlyClockIn?: boolean | undefined;
            companyId?: number | undefined;
            overtimeId?: number | undefined;
            endWorkDayAt?: string | undefined;
            publishType?: import("../../work-schedule/enums/work-schedule-publish-type.enum").EWorkSchedulePublishType | undefined;
            color?: string | undefined;
            startDate?: Date | undefined;
            endDate?: Date | undefined;
            state?: import("../../work-schedule/enums/work-schedule-state.enum").EWorkScheduleState | undefined;
            threshold?: number | undefined;
            publishHistories?: import("../../work-schedule/interfaces/work-schedule-publish-history.interface").IWorkSchedulePublishHistory[] | undefined;
            assignees?: import("../../work-schedule/interfaces/work-schedule-assignee.interface").IWorkScheduleAssignee | undefined;
            groupAssignees?: import("../../work-schedule/interfaces/work-schedule-group-assignee.interface").IWorkScheduleGroupAssignee | undefined;
            autoDeductions?: import("../../../../../core/database").AutoDeductionEntity[] | undefined;
            breaks?: import("../../../../../core/database").BreakRuleEntity[] | undefined;
            locationWorkSchedules?: import("../../../../../core/database").LocationWorkScheduleEntity[] | undefined;
            daySchedules?: import("../../../../../core/database").DayScheduleEntity[] | undefined;
            workScheduleAssignment?: import("../../../../../core/database/entities/work-schedule-assignment.entity").WorkScheduleAssignmentEntity[] | undefined;
            employees?: import("../../../../../core/database").EmployeeEntity[] | undefined;
            workScheduleTags?: import("../../../../../core/database").WorkScheduleTagEntity[] | undefined;
            organizationStructures?: import("../../../../../core/database").OrganizationStructureEntity[] | undefined;
            isDeleted?: boolean | undefined;
            createdBy?: string | undefined;
            createdOn?: Date | undefined;
            updatedBy?: string;
            updatedOn?: Date;
        };
        employeeInfo: {
            id: number;
            companyId?: number | undefined;
            payrollGroupId?: number | undefined;
            email?: string | undefined;
            employeeRef?: string | undefined;
            employeeNo?: string | undefined;
            fullNameLocal?: string | undefined;
            fullNameEn?: string | undefined;
            organizationElementId?: number | undefined;
            jobGradeId?: number | undefined;
            gender?: string | undefined;
            contractType?: import("../../../../../common/enums/contract-type.enum").EContractType | undefined;
            contractDateFrom?: Date | undefined;
            contractDateTo?: Date | undefined;
            maritalStatusId?: number | undefined;
            active?: boolean | undefined;
            joinDate?: Date;
            confirmDate?: Date;
            seniorityDate?: Date;
            isEssEnabled?: boolean | undefined;
            orgPath?: string;
            lastWorkingDate?: Date | undefined;
            workScheduleId?: number | undefined;
            payrollFrequencyId?: number | undefined;
            costCenterId?: number | undefined;
            payCalcMet?: import("../../../../payroll/modules/payroll-group/enums/payroll-group-type.enum").EPayrollGroupType | undefined;
            contractReferenceNo?: string;
            possiblePolicy?: {
                [leaveTypeId: string]: {
                    closestEffectiveDate: moment.Moment;
                    closestPolicy: import("../../../../../core/database").LeaveTypePolicyEntity;
                    leaveTypePolicyCredit?: import("../../../../../core/database").LeaveTypePolicyCreditEntity;
                    leaveTypeBalance?: import("../../../../../core/database").LeaveTypeBalanceEntity;
                    cfLeaveTypeBalance?: import("../../../../../core/database").LeaveTypeBalanceEntity;
                } | import("../../../../../common/types").EmptyObject;
            } | import("../../../../../common/types").EmptyObject;
            leaves?: import("../../../../../core/database").LeaveEntity[] | undefined;
            leaveTypeBalances?: import("../../../../../core/database").LeaveTypeBalanceEntity[] | null | undefined;
            leaveTypePolicyCredits?: import("../../../../../core/database").LeaveTypePolicyCreditEntity[] | null | undefined;
            approvalUsers?: import("../../../../../core/database").ApprovalUserEntity | undefined;
            payrollGroups?: import("../../../../../core/database").PayrollGroupEntity | undefined;
            company?: import("../../../../../core/database").CompanyEntity | undefined;
            costCenter?: import("../../../../../core/database").CostCenterEntity | undefined;
            aspNetUsers?: import("../../../../../core/database").AspNetUsersEntity | undefined;
            leaveTypes?: import("../../../../../core/database").LeaveTypeEntity[] | undefined;
            workSchedule?: import("../../../../../core/database").WorkScheduleEntity | undefined;
            orgStructure?: import("../../../../../core/database").OrganizationStructureEntity | undefined;
            payrollTimeSheets?: import("../../../../../core/database/entities/payroll-timesheet.entity").PayrollTimeSheetEntity[] | undefined;
            prtrxEmps?: import("../../../../../core/database/entities/prtrx-emp.entity").PrtrxEmpEntity[] | undefined;
            workScheduleAssignments?: import("../../../../../core/database/entities/work-schedule-assignment.entity").WorkScheduleAssignmentEntity[] | undefined;
            createdOn?: Date | undefined;
            updatedOn?: Date | undefined;
            isDeleted?: boolean | undefined;
            createdBy?: string | undefined;
            updatedBy?: string | undefined;
        };
        date: string;
        day: string;
        theLatestClockIn: boolean | null;
        firstIn: TimeEntryEntity | null;
        lastOut: TimeEntryEntity | null;
        timeEntries: TimeEntryEntity[];
        trackedHour: {
            trackedHour: number;
            sumBreakTimeById: {
                [key: string]: number;
            };
            workedHour: number;
            breakHour: number;
            unitTime: import("../../../common").UnitTime;
        };
        payrollHour: {
            payrollHour: number;
            workedHour: number;
            overTime: {
                regular: number;
                dailyOvertime: number;
                dailyDoubleOvertime: number;
                weeklyOvertime: number;
                restDayOvertime: number;
                publicHolidayOvertime: number;
            };
            breakPaid: number;
            autoDeduction: number;
            unitTime: import("../../../common").UnitTime;
        };
    }>;
    handleGetListTimeEntriesInDate(companyId: number, ttCompanyId: string, employeeId: number, query: GetDetailTimeEntryQueryDto): Promise<{
        data: any;
    }>;
    handleGetTimeEntriesDetail(companyId: number, ttCompanyId: string, employeeId: number, query: GetDetailTimeEntryQueryDto): Promise<{
        workScheduleEntity: {
            id: number | undefined;
            ttWorkScheduleId?: string | undefined;
            name?: string | undefined;
            utcOffset?: number | undefined;
            workArrangement?: import("../../../common").WorkArrangement | undefined;
            breakType?: import("../../../common").BreakType | undefined;
            default?: boolean | undefined;
            weeklyHours?: number | undefined;
            unitTime?: import("../../../common").UnitTime | undefined;
            excludeEarlyClockIn?: boolean | undefined;
            companyId?: number | undefined;
            overtimeId?: number | undefined;
            endWorkDayAt?: string | undefined;
            publishType?: import("../../work-schedule/enums/work-schedule-publish-type.enum").EWorkSchedulePublishType | undefined;
            color?: string | undefined;
            startDate?: Date | undefined;
            endDate?: Date | undefined;
            state?: import("../../work-schedule/enums/work-schedule-state.enum").EWorkScheduleState | undefined;
            threshold?: number | undefined;
            publishHistories?: import("../../work-schedule/interfaces/work-schedule-publish-history.interface").IWorkSchedulePublishHistory[] | undefined;
            assignees?: import("../../work-schedule/interfaces/work-schedule-assignee.interface").IWorkScheduleAssignee | undefined;
            groupAssignees?: import("../../work-schedule/interfaces/work-schedule-group-assignee.interface").IWorkScheduleGroupAssignee | undefined;
            autoDeductions?: import("../../../../../core/database").AutoDeductionEntity[] | undefined;
            breaks?: import("../../../../../core/database").BreakRuleEntity[] | undefined;
            locationWorkSchedules?: import("../../../../../core/database").LocationWorkScheduleEntity[] | undefined;
            daySchedules?: import("../../../../../core/database").DayScheduleEntity[] | undefined;
            workScheduleAssignment?: import("../../../../../core/database/entities/work-schedule-assignment.entity").WorkScheduleAssignmentEntity[] | undefined;
            employees?: import("../../../../../core/database").EmployeeEntity[] | undefined;
            workScheduleTags?: import("../../../../../core/database").WorkScheduleTagEntity[] | undefined;
            organizationStructures?: import("../../../../../core/database").OrganizationStructureEntity[] | undefined;
            isDeleted?: boolean | undefined;
            createdBy?: string | undefined;
            createdOn?: Date | undefined;
            updatedBy?: string;
            updatedOn?: Date;
        };
        employeeInfo: {
            id: number;
            companyId?: number | undefined;
            payrollGroupId?: number | undefined;
            email?: string | undefined;
            employeeRef?: string | undefined;
            employeeNo?: string | undefined;
            fullNameLocal?: string | undefined;
            fullNameEn?: string | undefined;
            organizationElementId?: number | undefined;
            jobGradeId?: number | undefined;
            gender?: string | undefined;
            contractType?: import("../../../../../common/enums/contract-type.enum").EContractType | undefined;
            contractDateFrom?: Date | undefined;
            contractDateTo?: Date | undefined;
            maritalStatusId?: number | undefined;
            active?: boolean | undefined;
            joinDate?: Date;
            confirmDate?: Date;
            seniorityDate?: Date;
            isEssEnabled?: boolean | undefined;
            orgPath?: string;
            lastWorkingDate?: Date | undefined;
            workScheduleId?: number | undefined;
            payrollFrequencyId?: number | undefined;
            costCenterId?: number | undefined;
            payCalcMet?: import("../../../../payroll/modules/payroll-group/enums/payroll-group-type.enum").EPayrollGroupType | undefined;
            contractReferenceNo?: string;
            possiblePolicy?: {
                [leaveTypeId: string]: {
                    closestEffectiveDate: moment.Moment;
                    closestPolicy: import("../../../../../core/database").LeaveTypePolicyEntity;
                    leaveTypePolicyCredit?: import("../../../../../core/database").LeaveTypePolicyCreditEntity;
                    leaveTypeBalance?: import("../../../../../core/database").LeaveTypeBalanceEntity;
                    cfLeaveTypeBalance?: import("../../../../../core/database").LeaveTypeBalanceEntity;
                } | import("../../../../../common/types").EmptyObject;
            } | import("../../../../../common/types").EmptyObject;
            leaves?: import("../../../../../core/database").LeaveEntity[] | undefined;
            leaveTypeBalances?: import("../../../../../core/database").LeaveTypeBalanceEntity[] | null | undefined;
            leaveTypePolicyCredits?: import("../../../../../core/database").LeaveTypePolicyCreditEntity[] | null | undefined;
            approvalUsers?: import("../../../../../core/database").ApprovalUserEntity | undefined;
            payrollGroups?: import("../../../../../core/database").PayrollGroupEntity | undefined;
            company?: import("../../../../../core/database").CompanyEntity | undefined;
            costCenter?: import("../../../../../core/database").CostCenterEntity | undefined;
            aspNetUsers?: import("../../../../../core/database").AspNetUsersEntity | undefined;
            leaveTypes?: import("../../../../../core/database").LeaveTypeEntity[] | undefined;
            workSchedule?: import("../../../../../core/database").WorkScheduleEntity | undefined;
            orgStructure?: import("../../../../../core/database").OrganizationStructureEntity | undefined;
            payrollTimeSheets?: import("../../../../../core/database/entities/payroll-timesheet.entity").PayrollTimeSheetEntity[] | undefined;
            prtrxEmps?: import("../../../../../core/database/entities/prtrx-emp.entity").PrtrxEmpEntity[] | undefined;
            workScheduleAssignments?: import("../../../../../core/database/entities/work-schedule-assignment.entity").WorkScheduleAssignmentEntity[] | undefined;
            createdOn?: Date | undefined;
            updatedOn?: Date | undefined;
            isDeleted?: boolean | undefined;
            createdBy?: string | undefined;
            updatedBy?: string | undefined;
        };
        date: string;
        day: string;
        theLatestClockIn: boolean | null;
        firstIn: TimeEntryEntity | null;
        lastOut: TimeEntryEntity | null;
        timeEntries: TimeEntryEntity[];
        trackedHour: {
            trackedHour: number;
            sumBreakTimeById: {
                [key: string]: number;
            };
            workedHour: number;
            breakHour: number;
            unitTime: import("../../../common").UnitTime;
        };
        payrollHour: {
            payrollHour: number;
            workedHour: number;
            overTime: {
                regular: number;
                dailyOvertime: number;
                dailyDoubleOvertime: number;
                weeklyOvertime: number;
                restDayOvertime: number;
                publicHolidayOvertime: number;
            };
            breakPaid: number;
            autoDeduction: number;
            unitTime: import("../../../common").UnitTime;
        };
    }>;
    handleSummarizeOverviewTimeEntries(companyId: number, ttCompanyId: string, query: GetTimeEntriesOverviewQueryDto): Promise<any>;
    handleGetOverviewTimeEntries(companyId: number, ttCompanyId: string, query: GetTimeEntriesOverviewQueryDto): Promise<{
        data: (ITimeEntryOverviewResponse | ITimeEntryOverviewData)[];
        page: number;
        take: number;
        itemCount: number;
        pageCount: number;
        hasPreviousPage: false;
        hasNextPage: true;
    }>;
    handleGetOverviewTimeEntriesOfEmployee(companyId: number, ttCompanyId: string, employeeId: number, query: GetTimeEntriesOverviewQueryESSDto): Promise<{
        page: number;
        take: number;
        itemCount: number;
        pageCount: number;
        hasPreviousPage: false;
        hasNextPage: true;
        data: ITimeEntryOverviewResponse[];
    }>;
    getLastActivityByEmployeeId(employeeId: number, companyId: number, ttCompanyId: string): Promise<any>;
    deleteTimeEntry(deleteTimeEntryDto: DeleteTimeEntryDto, timeTrackerCompanyId: string): Promise<TimeEntryEntity>;
    updateTimeEntry(updateTimeEntryDto: UpdateMultiTimeEntryDto[], timeTrackerCompanyId: string, companyId: number): Promise<TimeEntryEntity[]>;
    handleCalculateUnpaidDaysTimeTracker(listEmployeeIds: number[], startDate: string, endDate: string, companyId: number, ttCompanyId: string): Promise<{
        UnpaidInfo: Record<string, {
            day: string;
            unPaidDay: number;
            leaveId?: number;
        }[]>;
        LeaveInfo: {
            [employeeId: number]: {
                id: number;
                dateFrom: string;
                dateTo: string;
                effDayOfLeave: number;
                daysOff: string[];
                workingHalfDay: string[];
                workingFullDay: string[];
            }[];
        };
        trackedInfo: any;
    }>;
    handleRecompute(companyId: number, ttCompanyId: string, userEmail: string, payrollHeaderId: number): Promise<never[] | {
        result: import("../../../../../core/database").TimeSheetAdjustmentEntity[];
    }>;
}
